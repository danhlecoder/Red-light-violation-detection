import discord
import aiohttp
import asyncio
import json
import os
from datetime import datetime
from discord import Webhook, Embed, Color
import logging
from pathlib import Path
import requests
import base64
from io import BytesIO

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("discord_bot")

# C·∫•u h√¨nh Discord Webhook - l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c s·ª≠ d·ª•ng URL c·ªë ƒë·ªãnh
DISCORD_WEBHOOK_URL = os.environ.get('DISCORD_WEBHOOK_URL', 'https://discord.com/api/webhooks/1372935139474280489/tD2uU2vOLyeaq-dhDWWWF9ze64azEdI1yetZaUvyp-l3YNwap-4D5GgXa3tfHystbJCf')

# URL g·ªëc c·ªßa server - thay ƒë·ªïi theo domain c·ªßa b·∫°n
SERVER_URL = os.environ.get('SERVER_URL', 'http://localhost:5000')

# ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c vi ph·∫°m
BASE_DIR = Path(__file__).parent.parent.absolute()
DATA_DIR = os.path.join(BASE_DIR, 'data')
VIOLATIONS_FOLDER = os.path.join(DATA_DIR, 'violations')

# Kh·ªüi t·∫°o client discord
client = discord.Client(intents=discord.Intents.default())

async def send_violation_to_discord(violation_data):
    """
    G·ª≠i th√¥ng tin vi ph·∫°m ƒë·∫øn Discord th√¥ng qua webhook
    
    Args:
        violation_data (dict): D·ªØ li·ªáu vi ph·∫°m g·ªìm c√°c th√¥ng tin nh∆∞ id, th·ªùi gian, lo·∫°i ph∆∞∆°ng ti·ªán, bi·ªÉn s·ªë, ·∫£nh...
    """
    try:
        if not DISCORD_WEBHOOK_URL:
            logger.error("C·∫¢NH B√ÅO: DISCORD_WEBHOOK_URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh")
            return False
            
        # In d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c ƒë·ªÉ debug
        logger.info(f"D·ªØ li·ªáu vi ph·∫°m nh·∫≠n ƒë∆∞·ª£c: {json.dumps(violation_data, indent=2, ensure_ascii=False)}")
        
        # L·∫•y th√¥ng tin t·ª´ d·ªØ li·ªáu vi ph·∫°m
        violation_id = violation_data.get('id', 'N/A')
        timestamp = violation_data.get('timestamp', datetime.now().isoformat())
        vehicle_type = violation_data.get('vehicleType', 'Kh√¥ng x√°c ƒë·ªãnh')
        license_plate = violation_data.get('licensePlate', 'Kh√¥ng x√°c ƒë·ªãnh')
        violation_type = violation_data.get('violation_type', 'V∆∞·ª£t ƒë√®n ƒë·ªè')
        
        # ƒê·ªãnh d·∫°ng ID vi ph·∫°m
        if isinstance(violation_id, (int, str)) and str(violation_id).isdigit():
            formatted_id = str(violation_id).zfill(5)
        else:
            formatted_id = str(violation_id)
        
        # Chuy·ªÉn ƒë·ªïi timestamp sang ƒë·ªëi t∆∞·ª£ng datetime
        try:
            if isinstance(timestamp, str):
                # X·ª≠ l√Ω nhi·ªÅu ƒë·ªãnh d·∫°ng timestamp kh√°c nhau
                if "T" in timestamp:
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                else:
                    dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
                timestamp_str = dt.strftime('%H:%M:%S %d/%m/%Y')
            else:
                timestamp_str = datetime.now().strftime('%H:%M:%S %d/%m/%Y')
        except Exception as e:
            logger.error(f"L·ªói khi ph√¢n t√≠ch timestamp: {e}")
            timestamp_str = str(timestamp)
        
        # X·ª≠ l√Ω h√¨nh ·∫£nh vi ph·∫°m
        image_data = None
        image_url = None
        
        # 1. Th·ª≠ l·∫•y h√¨nh ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n file
        scene_image_path = violation_data.get('scene_image', '')
        if scene_image_path:
            # T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
            if os.path.isabs(scene_image_path):
                full_path = scene_image_path
            else:
                # N·∫øu l√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi, th·ª≠ t√¨m trong th∆∞ m·ª•c vi ph·∫°m
                file_name = os.path.basename(scene_image_path)
                full_path = os.path.join(VIOLATIONS_FOLDER, file_name)
                
                # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m file theo ID
                if not os.path.exists(full_path):
                    # T√¨m ki·∫øm file ·∫£nh c√≥ ID t∆∞∆°ng t·ª± trong th∆∞ m·ª•c vi ph·∫°m
                    if os.path.exists(VIOLATIONS_FOLDER):
                        for file in os.listdir(VIOLATIONS_FOLDER):
                            if f"violation_{formatted_id}_scene" in file:
                                full_path = os.path.join(VIOLATIONS_FOLDER, file)
                                logger.info(f"ƒê√£ t√¨m th·∫•y file ·∫£nh thay th·∫ø: {file}")
                                break
            
            # Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
            if os.path.exists(full_path):
                logger.info(f"ƒê√£ t√¨m th·∫•y file ·∫£nh: {full_path}")
                try:
                    # ƒê·ªçc file ·∫£nh v√† m√£ h√≥a base64
                    with open(full_path, 'rb') as img_file:
                        image_data = base64.b64encode(img_file.read()).decode('utf-8')
                    logger.info(f"ƒê√£ ƒë·ªçc v√† m√£ h√≥a file ·∫£nh: {full_path}")
                except Exception as e:
                    logger.error(f"L·ªói khi ƒë·ªçc file ·∫£nh: {e}")
            else:
                logger.warning(f"Kh√¥ng t√¨m th·∫•y file ·∫£nh: {full_path}")
        
        # 2. Th·ª≠ l·∫•y URL ·∫£nh t·ª´ d·ªØ li·ªáu
        if not image_data:
            scene_image_url = violation_data.get('scene_image_url', '')
            if scene_image_url:
                if scene_image_url.startswith('/'):
                    # Chuy·ªÉn ƒë·ªïi URL t∆∞∆°ng ƒë·ªëi th√†nh URL tuy·ªát ƒë·ªëi
                    scene_image_url = f"{SERVER_URL}{scene_image_url}"
                
                # S·ª≠ d·ª•ng URL tr·ª±c ti·∫øp
                image_url = scene_image_url
                logger.info(f"S·ª≠ d·ª•ng URL ·∫£nh: {image_url}")
        
        # T·∫°o embed ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n tr√™n Discord
        embed = Embed(
            title=f"üö® Vi ph·∫°m - #{formatted_id} üö®",
            description=f"Ph√°t hi·ªán vi ph·∫°m **{violation_type}** ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.",
            color=Color.red(),
            timestamp=datetime.now()
        )
        
        # Th√™m th√¥ng tin chi ti·∫øt
        embed.add_field(name="‚è∞ Th·ªùi gian", value=timestamp_str, inline=True)
        embed.add_field(name="üöó Lo·∫°i ph∆∞∆°ng ti·ªán", value=vehicle_type, inline=True)
        embed.add_field(name="üî¢ Bi·ªÉn s·ªë xe", value=license_plate, inline=True)
        
        # Th√™m footer
        embed.set_footer(text=f"H·ªá th·ªëng gi√°m s√°t giao th√¥ng ‚Ä¢ H√¥m nay l√∫c {datetime.now().strftime('%H:%M')}")
        
        # G·ª≠i th√¥ng tin vi ph·∫°m qua webhook
        async with aiohttp.ClientSession() as session:
            webhook = Webhook.from_url(DISCORD_WEBHOOK_URL, session=session)
            
            # N·∫øu c√≥ d·ªØ li·ªáu ·∫£nh, g·ª≠i d∆∞·ªõi d·∫°ng file
            if image_data:
                # Chuy·ªÉn ƒë·ªïi base64 th√†nh bytes
                image_bytes = base64.b64decode(image_data)
                file = discord.File(BytesIO(image_bytes), filename=f"violation_{formatted_id}.jpg")
                
                # ƒê·∫∑t ·∫£nh v√†o embed
                embed.set_image(url=f"attachment://violation_{formatted_id}.jpg")
                
                # G·ª≠i embed v·ªõi file ƒë√≠nh k√®m
                await webhook.send(embed=embed, file=file)
                logger.info(f"ƒê√£ g·ª≠i th√¥ng tin vi ph·∫°m #{formatted_id} v·ªõi file ·∫£nh ƒë√≠nh k√®m")
            # N·∫øu c√≥ URL ·∫£nh, s·ª≠ d·ª•ng URL
            elif image_url:
                embed.set_image(url=image_url)
                await webhook.send(embed=embed)
                logger.info(f"ƒê√£ g·ª≠i th√¥ng tin vi ph·∫°m #{formatted_id} v·ªõi URL ·∫£nh: {image_url}")
            # N·∫øu kh√¥ng c√≥ ·∫£nh, ch·ªâ g·ª≠i th√¥ng tin
            else:
                await webhook.send(embed=embed)
                logger.info(f"ƒê√£ g·ª≠i th√¥ng tin vi ph·∫°m #{formatted_id} kh√¥ng c√≥ ·∫£nh")
        
        logger.info(f"ƒê√£ g·ª≠i th√¥ng tin vi ph·∫°m #{formatted_id} l√™n Discord th√†nh c√¥ng")
        return True
        
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i th√¥ng tin vi ph·∫°m l√™n Discord: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

async def process_violation_webhook(request_data):
    """
    X·ª≠ l√Ω webhook t·ª´ server khi c√≥ vi ph·∫°m ƒë∆∞·ª£c x√°c nh·∫≠n
    
    Args:
        request_data (dict): D·ªØ li·ªáu t·ª´ webhook
    """
    try:
        violation_data = request_data.get('violation', {})
        if not violation_data:
            logger.error("Kh√¥ng c√≥ d·ªØ li·ªáu vi ph·∫°m trong request")
            return False
            
        return await send_violation_to_discord(violation_data)
    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω webhook vi ph·∫°m: {e}")
        return False

# H√†m ti·ªán √≠ch ƒë·ªÉ chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ Flask/FastAPI th√†nh ƒë·ªãnh d·∫°ng ph√π h·ª£p
def convert_violation_data(request_json):
    """
    Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ API web th√†nh ƒë·ªãnh d·∫°ng ph√π h·ª£p cho Discord
    """
    # ƒê√£ chuy·ªÉn ƒë·ªïi trong h√†m x·ª≠ l√Ω ch√≠nh
    return request_json

# N·∫øu ch·∫°y tr·ª±c ti·∫øp th√¥ng qua script
if __name__ == "__main__":
    logger.info("Bot Discord ƒëang ch·∫°y. ƒêang ch·ªù webhook vi ph·∫°m...")
    logger.info(f"Th∆∞ m·ª•c vi ph·∫°m: {VIOLATIONS_FOLDER}")
    
    # Ki·ªÉm tra th∆∞ m·ª•c vi ph·∫°m
    if os.path.exists(VIOLATIONS_FOLDER):
        files = os.listdir(VIOLATIONS_FOLDER)
        logger.info(f"S·ªë l∆∞·ª£ng file trong th∆∞ m·ª•c vi ph·∫°m: {len(files)}")
        if files:
            logger.info(f"M·ªôt s·ªë file vi ph·∫°m: {files[:5]}")
    else:
        logger.warning(f"Th∆∞ m·ª•c vi ph·∫°m kh√¥ng t·ªìn t·∫°i: {VIOLATIONS_FOLDER}")
    
    # Example ƒë·ªÉ test
    test_data = {
        "id": "00001",
        "timestamp": "2023-10-25T15:30:45",
        "vehicleType": "√î t√¥",
        "licensePlate": "51F-12345",
        "violation_type": "V∆∞·ª£t ƒë√®n ƒë·ªè",
        "scene_image": "violation_00001_scene.jpg"
    }
    
    # Ch·∫°y test g·ª≠i th√¥ng b√°o n·∫øu c√≥ webhook URL
    if DISCORD_WEBHOOK_URL:
        asyncio.run(send_violation_to_discord(test_data))
        logger.info("ƒê√£ g·ª≠i d·ªØ li·ªáu vi ph·∫°m m·∫´u ƒë·ªÉ ki·ªÉm tra.")
    else:
        logger.info("Vui l√≤ng c·∫•u h√¨nh DISCORD_WEBHOOK_URL ƒë·ªÉ s·ª≠ d·ª•ng bot.")
