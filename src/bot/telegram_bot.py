import asyncio
import json
import os
import logging
from pathlib import Path
import base64
from io import BytesIO
from datetime import datetime

import aiohttp
from telegram import Bot, InputFile
from telegram.constants import ParseMode

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("telegram_bot")

# C·∫•u h√¨nh Telegram Bot - l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c s·ª≠ d·ª•ng token c·ªë ƒë·ªãnh
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '7964241802:AAHSM6g6CPOvz2kPZvbc50YdKavKWGalI1k')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '7519520037')  # ID c·ªßa chat/group/channel

# URL g·ªëc c·ªßa server - thay ƒë·ªïi theo domain c·ªßa b·∫°n
SERVER_URL = os.environ.get('SERVER_URL', 'http://localhost:5000')

# ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c vi ph·∫°m
BASE_DIR = Path(__file__).parent.parent.absolute()
DATA_DIR = os.path.join(BASE_DIR, 'data')
VIOLATIONS_FOLDER = os.path.join(DATA_DIR, 'violations')

def send_telegram_message(chat_id, text):
    """
    G·ª≠i tin nh·∫Øn vƒÉn b·∫£n ƒë·∫øn Telegram s·ª≠ d·ª•ng requests thay v√¨ asyncio
    
    Args:
        chat_id (str): ID c·ªßa chat/group/channel ƒë·ªÉ g·ª≠i tin nh·∫Øn
        text (str): N·ªôi dung tin nh·∫Øn
    """
    import requests
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    
    try:
        response = requests.post(url, json=payload)
        if response.status_code == 200:
            logger.info(f"ƒê√£ g·ª≠i tin nh·∫Øn th√†nh c√¥ng ƒë·∫øn chat_id: {chat_id}")
            return True
        else:
            logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn: {e}")
        return False

def send_telegram_photo(chat_id, photo_path, caption):
    """
    G·ª≠i ·∫£nh ƒë·∫øn Telegram s·ª≠ d·ª•ng requests thay v√¨ asyncio
    
    Args:
        chat_id (str): ID c·ªßa chat/group/channel ƒë·ªÉ g·ª≠i tin nh·∫Øn
        photo_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ·∫£nh
        caption (str): Ch√∫ th√≠ch cho ·∫£nh
    """
    import requests
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
    
    try:
        # ƒê·ªçc file ·∫£nh
        with open(photo_path, 'rb') as photo_file:
            files = {'photo': photo_file}
            payload = {
                "chat_id": chat_id,
                "caption": caption,
                "parse_mode": "Markdown"
            }
            
            response = requests.post(url, data=payload, files=files)
            
        if response.status_code == 200:
            logger.info(f"ƒê√£ g·ª≠i ·∫£nh th√†nh c√¥ng ƒë·∫øn chat_id: {chat_id}")
            return True
        else:
            logger.error(f"L·ªói khi g·ª≠i ·∫£nh: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i ·∫£nh: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def send_violation_to_telegram(violation_data, chat_id=None):
    """
    G·ª≠i th√¥ng tin vi ph·∫°m ƒë·∫øn Telegram s·ª≠ d·ª•ng requests thay v√¨ asyncio
    
    Args:
        violation_data (dict): D·ªØ li·ªáu vi ph·∫°m g·ªìm c√°c th√¥ng tin nh∆∞ id, th·ªùi gian, lo·∫°i ph∆∞∆°ng ti·ªán, bi·ªÉn s·ªë, ·∫£nh...
        chat_id (str, optional): ID c·ªßa chat/group/channel ƒë·ªÉ g·ª≠i tin nh·∫Øn. N·∫øu kh√¥ng cung c·∫•p, s·∫Ω s·ª≠ d·ª•ng TELEGRAM_CHAT_ID.
    """
    try:
        if not TELEGRAM_BOT_TOKEN:
            logger.error("C·∫¢NH B√ÅO: TELEGRAM_BOT_TOKEN ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh")
            return False
            
        if not chat_id and not TELEGRAM_CHAT_ID:
            logger.error("C·∫¢NH B√ÅO: TELEGRAM_CHAT_ID ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh")
            return False
            
        # S·ª≠ d·ª•ng chat_id ƒë∆∞·ª£c cung c·∫•p ho·∫∑c m·∫∑c ƒë·ªãnh
        target_chat_id = chat_id or TELEGRAM_CHAT_ID
            
        # In d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c ƒë·ªÉ debug
        logger.info(f"D·ªØ li·ªáu vi ph·∫°m nh·∫≠n ƒë∆∞·ª£c: {json.dumps(violation_data, indent=2, ensure_ascii=False)}")
        
        # L·∫•y th√¥ng tin t·ª´ d·ªØ li·ªáu vi ph·∫°m
        violation_id = violation_data.get('id', 'N/A')
        timestamp = violation_data.get('timestamp', datetime.now().isoformat())
        vehicle_type = violation_data.get('vehicleType', 'Kh√¥ng x√°c ƒë·ªãnh')
        license_plate = violation_data.get('licensePlate', 'Kh√¥ng x√°c ƒë·ªãnh')
        violation_type = violation_data.get('violation_type', 'V∆∞·ª£t ƒë√®n ƒë·ªè')
        
        # ƒê·ªãnh d·∫°ng ID vi ph·∫°m
        if isinstance(violation_id, (int, str)) and str(violation_id).isdigit():
            formatted_id = str(violation_id).zfill(5)
        else:
            formatted_id = str(violation_id)
        
        # Chuy·ªÉn ƒë·ªïi timestamp sang ƒë·ªëi t∆∞·ª£ng datetime
        try:
            if isinstance(timestamp, str):
                # X·ª≠ l√Ω nhi·ªÅu ƒë·ªãnh d·∫°ng timestamp kh√°c nhau
                if "T" in timestamp:
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                else:
                    dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
                timestamp_str = dt.strftime('%H:%M:%S %d/%m/%Y')
            else:
                timestamp_str = datetime.now().strftime('%H:%M:%S %d/%m/%Y')
        except Exception as e:
            logger.error(f"L·ªói khi ph√¢n t√≠ch timestamp: {e}")
            timestamp_str = str(timestamp)
        
        # T·∫°o n·ªôi dung tin nh·∫Øn
        message_text = (
            f"üö® *VI PH·∫†M - #{formatted_id}* üö®\n\n"
            f"Ph√°t hi·ªán vi ph·∫°m *{violation_type}* ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.\n\n"
            f"‚è∞ *Th·ªùi gian:* {timestamp_str}\n"
            f"üöó *Lo·∫°i ph∆∞∆°ng ti·ªán:* {vehicle_type}\n"
            f"üî¢ *Bi·ªÉn s·ªë xe:* {license_plate}\n\n"
            f"_H·ªá th·ªëng gi√°m s√°t giao th√¥ng ‚Ä¢ H√¥m nay l√∫c {datetime.now().strftime('%H:%M')}_"
        )
        
        # X·ª≠ l√Ω h√¨nh ·∫£nh vi ph·∫°m
        scene_image_path = violation_data.get('scene_image', '')
        if scene_image_path:
            # T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
            if os.path.isabs(scene_image_path):
                full_path = scene_image_path
            else:
                # N·∫øu l√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi, th·ª≠ t√¨m trong th∆∞ m·ª•c vi ph·∫°m
                file_name = os.path.basename(scene_image_path)
                full_path = os.path.join(VIOLATIONS_FOLDER, file_name)
                
                # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m file theo ID
                if not os.path.exists(full_path):
                    # T√¨m ki·∫øm file ·∫£nh c√≥ ID t∆∞∆°ng t·ª± trong th∆∞ m·ª•c vi ph·∫°m
                    if os.path.exists(VIOLATIONS_FOLDER):
                        for file in os.listdir(VIOLATIONS_FOLDER):
                            if f"violation_{formatted_id}_scene" in file:
                                full_path = os.path.join(VIOLATIONS_FOLDER, file)
                                logger.info(f"ƒê√£ t√¨m th·∫•y file ·∫£nh thay th·∫ø: {file}")
                                break
            
            # Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
            if os.path.exists(full_path):
                logger.info(f"ƒê√£ t√¨m th·∫•y file ·∫£nh: {full_path}")
                return send_telegram_photo(target_chat_id, full_path, message_text)
        
        # N·∫øu kh√¥ng c√≥ ·∫£nh, g·ª≠i tin nh·∫Øn vƒÉn b·∫£n
        return send_telegram_message(target_chat_id, message_text)
        
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i th√¥ng tin vi ph·∫°m l√™n Telegram: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def process_violation_webhook(request_data, chat_id=None):
    """
    X·ª≠ l√Ω webhook t·ª´ server khi c√≥ vi ph·∫°m ƒë∆∞·ª£c x√°c nh·∫≠n
    
    Args:
        request_data (dict): D·ªØ li·ªáu t·ª´ webhook
        chat_id (str, optional): ID c·ªßa chat/group/channel ƒë·ªÉ g·ª≠i tin nh·∫Øn
    """
    try:
        violation_data = request_data.get('violation', {})
        if not violation_data:
            logger.error("Kh√¥ng c√≥ d·ªØ li·ªáu vi ph·∫°m trong request")
            return False
            
        return send_violation_to_telegram(violation_data, chat_id)
    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω webhook vi ph·∫°m: {e}")
        return False

def send_test_message(chat_id):
    """
    G·ª≠i tin nh·∫Øn test ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi v·ªõi Telegram
    
    Args:
        chat_id (str): ID c·ªßa chat/group/channel ƒë·ªÉ g·ª≠i tin nh·∫Øn
    """
    return send_telegram_message(
        chat_id, 
        "üîÑ H·ªá th·ªëng gi√°m s√°t giao th√¥ng ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Telegram Bot!"
    )

# N·∫øu ch·∫°y tr·ª±c ti·∫øp th√¥ng qua script
if __name__ == "__main__":
    logger.info("Bot Telegram ƒëang ch·∫°y. ƒêang ch·ªù webhook vi ph·∫°m...")
    logger.info(f"Th∆∞ m·ª•c vi ph·∫°m: {VIOLATIONS_FOLDER}")
    
    # Ki·ªÉm tra th∆∞ m·ª•c vi ph·∫°m
    if os.path.exists(VIOLATIONS_FOLDER):
        files = os.listdir(VIOLATIONS_FOLDER)
        logger.info(f"S·ªë l∆∞·ª£ng file trong th∆∞ m·ª•c vi ph·∫°m: {len(files)}")
        if files:
            logger.info(f"M·ªôt s·ªë file vi ph·∫°m: {files[:5]}")
    else:
        logger.warning(f"Th∆∞ m·ª•c vi ph·∫°m kh√¥ng t·ªìn t·∫°i: {VIOLATIONS_FOLDER}")
    
    # Ki·ªÉm tra c·∫•u h√¨nh Telegram
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng c·∫•u h√¨nh ƒë·ªÉ s·ª≠ d·ª•ng bot.")
    elif not TELEGRAM_CHAT_ID:
        logger.warning("TELEGRAM_CHAT_ID ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng cung c·∫•p chat_id khi g·ªçi h√†m g·ª≠i th√¥ng b√°o.")
    
    # Example ƒë·ªÉ test
    test_data = {
        "id": "00001",
        "timestamp": "2023-10-25T15:30:45",
        "vehicleType": "√î t√¥",
        "licensePlate": "51F-12345",
        "violation_type": "V∆∞·ª£t ƒë√®n ƒë·ªè",
        "scene_image": "violation_00004_scene.jpg"  # S·ª≠ d·ª•ng file c√≥ s·∫µn trong th∆∞ m·ª•c vi ph·∫°m
    }
    
    # N·∫øu c√≥ chat_id, ch·∫°y test g·ª≠i th√¥ng b√°o
    if TELEGRAM_CHAT_ID and TELEGRAM_BOT_TOKEN:
        logger.info(f"ƒêang th·ª≠ g·ª≠i tin nh·∫Øn test ƒë·∫øn chat_id: {TELEGRAM_CHAT_ID}")
        send_test_message(TELEGRAM_CHAT_ID)
        
        logger.info("ƒêang th·ª≠ g·ª≠i d·ªØ li·ªáu vi ph·∫°m m·∫´u ƒë·ªÉ ki·ªÉm tra...")
        send_violation_to_telegram(test_data)
    else:
        logger.info("Vui l√≤ng c·∫•u h√¨nh TELEGRAM_BOT_TOKEN v√† TELEGRAM_CHAT_ID ƒë·ªÉ test bot.")
        logger.info("B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh sau ƒë·ªÉ ch·∫°y bot v·ªõi chat_id c·ª• th·ªÉ:")
        logger.info("$env:TELEGRAM_CHAT_ID=\"YOUR_CHAT_ID\"; python bot/telegram_bot.py")
